<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rsync同步文件</title>
    <url>/2023/11/10/Rsync%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>Rsync常用的一款同步文件工具。配置也很方便。</p>
<p>&nbsp;</p>
<p>yum install sync -y或者apt-get install sync</p>
<ul>
<li>服务安装好之后，/etc下没有配置文件，一般情况可以copy示例文件到/etc下</li>
</ul>
<p>&nbsp;</p>
<p>#cp&nbsp;/usr/share/doc/rsync/examples/rsyncd.conf&nbsp;/etc</p>
<p>&nbsp;</p>
<p>vim /etc/rsyncd.conf</p>
<p>uid = common</p>
<p>gid = common</p>
<p>use chroot = no</p>
<p>max connections = 10</p>
<p>strict modes = yes</p>
<p>hosts allow = 192.168.2.12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #可以空格，允许多个</p>
<p>hosts deny = *</p>
<p>port = 5699&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#默认开启端口</p>
<p>pid file = /var/run/rsyncd.pid</p>
<p>lock file = /var/run/rsync.lock</p>
<p>log file = /var/log/rsyncd.log</p>
<p>[hmt]</p>
<p>path = /data/www/html/</p>
<p>comment = hello</p>
<p>ignore errors</p>
<p>read only = no</p>
<p>write only = no</p>
<p>hosts allow = 192.168.2.12&nbsp;</p>
<p>list = false</p>
<p>auth users = hmt</p>
<p>secrets file = /etc/rsync.password</p>
<ul>
<li>建立/etc/rsyncd/rsyncd.secrets文件</li>
</ul>
<p>#vim /etc/rsync.password</p>
<p>#cat /etc/rsyncd/rsyncd.secrets</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;hmt:123456</p>
<ul>
<li>为了密码的安全性，我们必须把权限设为600</li>
</ul>
<h1 id="chown-root-root-etc-rsyncd-rsyncd-secrets"><a href="#chown-root-root-etc-rsyncd-rsyncd-secrets" class="headerlink" title="chown root:root /etc/rsyncd/rsyncd.secrets"></a>chown root:root /etc/rsyncd/rsyncd.secrets</h1><p>chmod 600&nbsp;&nbsp;/etc/rsync.password</p>
<h1 id="chmod-600-etc-rsyncd-rsyncd-secrets"><a href="#chmod-600-etc-rsyncd-rsyncd-secrets" class="headerlink" title="chmod 600&nbsp;/etc/rsyncd/rsyncd.secrets"></a>chmod 600&nbsp;/etc/rsyncd/rsyncd.secrets</h1><h1 id="vim-etc-rsyncd-rsyncd-motd"><a href="#vim-etc-rsyncd-rsyncd-motd" class="headerlink" title="vim /etc/rsyncd/rsyncd.motd"></a>vim /etc/rsyncd/rsyncd.motd</h1><p>&nbsp;</p>
<p>启动rsync：</p>
<p>systemctl start rsyncd.service</p>
<p>&nbsp;lsof -i:5699</p>
<p>lsof -i:5699</p>
<p>COMMAND PID USER&nbsp; &nbsp;FD&nbsp; &nbsp;TYPE&nbsp; &nbsp;DEVICE SIZE/OFF NODE NAME</p>
<p>rsync&nbsp; &nbsp;750 root&nbsp; &nbsp; 4u&nbsp; IPv4 22661487&nbsp; &nbsp; &nbsp; 0t0&nbsp; TCP *:5699 (LISTEN)</p>
<p>rsync&nbsp; &nbsp;750 root&nbsp; &nbsp; 5u&nbsp; IPv6 22661488&nbsp; &nbsp; &nbsp; 0t0&nbsp; TCP *:5699 (LISTEN)</p>
<p>至此服务器端安装完毕；</p>
<p>客户端安装配置：</p>
<p>&nbsp;</p>
<p>yum -y install rsync</p>
<p>&nbsp;客户端需要vim&nbsp;/etc/rsync.password&nbsp;</p>
<p>cat&nbsp;&nbsp;/etc/rsync.password</p>
<p>123456</p>
<p>运行：</p>
<p>rsync -avz –port 5699 –password-file=/etc/rsync.password <a href="mailto:hmt@192.168.2.12">hmt@192.168.2.12</a>::hmt&nbsp; /data/www/html</p>
<p>Password: 这里要输入rsync的密码，是服务器端提供的，在前面的例子中，我们用的是 asdf，输入的密码并不显示出来；输好后就回车；&nbsp;注：&nbsp;这个命令的意思就是说，用rsync 用户登录到服务器上，把/data/www/html&nbsp;数据，同步到本地目录/data/www/html/上。当然本地的目录是可以你自己定义的，比如 dave也是可以的；当你在客户端上，当前操作的目录下没有/tmp/test/这个目录时，系统会自动为你创建一个；当存在/tmp/test/这个目录中，你要注意它的写权限。</p>
<p>参数说明：</p>
<p>&nbsp;-a 参数，相当于-rlptgoD，</p>
<p>&nbsp;&nbsp;&nbsp;-r 是递归 -l 是链接文件，意思是拷贝链接文件；</p>
<p>&nbsp;&nbsp;&nbsp;-p 表示保持文件原有权限；</p>
<p>&nbsp;&nbsp;&nbsp;-t 保持文件原有时间；<br>&nbsp;&nbsp;&nbsp;-g 保持文件原有用户组；</p>
<p>&nbsp;&nbsp;&nbsp;-o 保持文件原有属主；</p>
<p>&nbsp;&nbsp;&nbsp;-D 相当于块设备文件；</p>
<p>&nbsp;&nbsp;&nbsp;-z 传输时压缩；</p>
<p>&nbsp;&nbsp;&nbsp;-P 传输进度；</p>
<p>&nbsp;&nbsp;&nbsp;-v 传输时的进度等信息，和-P有点关系</p>
<p>&nbsp;<br>*</p>
<p>rsync -avzP &nbsp;–delete <a href="mailto:rsync@192.168.2.150">rsync@192.168.2.150</a>::hometools&nbsp;/tmp/test/</p>
<p>–delete 选项，表示服务器上的数据要与客户端完全一致，如果 /tmp/test/目录中有服务器上不存在的文件，则删除。最终目的是让/tmp/test/目录上的数据完全与服务器上保持一致；用的时候要小心点，最好不要把已经有重要数所据的目录，当做本地更新目录，否则会把你的数据全部删除；
&nbsp;</p>
<p>计划任务同步：</p>
<p>*/5 * * * * rsync -zvaP <a href="mailto:rsync@192.168.2.150">rsync@192.168.2.150</a>::hometools /tmp/test/ –password-file=/etc/rsyncd/rsyncd.secrets</p>
<p>*/5 * * * * rsync -avz –port 5699 –password-file=/etc/rsync.password <a href="mailto:hmt@192.168.2.12">hmt@192.168.2.12</a>::hmt&nbsp; /data/www/html</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  <entry>
    <title>frp搭建</title>
    <url>/2023/11/10/frp%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p> &nbsp; 开发不在公司需要连到公司内网调试业务，有点周折，frp内网穿透来帮忙。网上很多文章，自己做个小笔记。</p>
<p>首先到官网：</p>
<p>&nbsp;<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
<p>下载: frp_0.16.0_linux_amd64.tar.gz服务器端</p>
<p>解压出来ls:</p>
<p>frpc&nbsp; frpc_full.ini&nbsp; frpc_http.ini&nbsp; frpc.ini&nbsp; frps&nbsp; frps_full.ini&nbsp; frps.ini&nbsp; LICENSE&nbsp; nohup.out</p>
<p>服务器端只需要两个文件frps和frps.ini,其中frps为可执行文件，frps.ini为配置文件默认配置文件如下：其中bind_addr为本机IP,bind_port为frp对客户端的端口号，auto_token是客户端连接服务器端的口令。</p>
<p>[common]</p>
<p>Bind_addr=0.0.0.0</p>
<p>Bind_port =4443</p>
<p>Auto_token = frp</p>
<p>配置好以后可以运行起来./frps -c ./frps.ini</p>
<p>最好后台运行：nohup ./frps -c ./frps.ini &amp;</p>
<p>2018/05/17 10:49:11 [I] [service.go:96] frps tcp listen on 0.0.0.0:4443</p>
<p>2018/05/17 10:49:11 [I] [main.go:112] Start frps success</p>
<p>&nbsp;需要穿透端口的服务器端开启：</p>
<p>nohup ./frps -c ./frps.ini &amp;</p>
<p>同样将客户端解压后有七个文件，只需要frpc和frpc.ini,配置文件如下：</p>
<p>&nbsp;[common]</p>
<p>Server_addr = 123.123.123.123</p>
<p>Server_port = 4443</p>
<p>Auto-token = frp</p>
<p>[ssh_1]</p>
<p>Type = tcp</p>
<p>Local_ip = 127.0.0.1</p>
<p>Local_port = 22</p>
<p>Remote_port = 10085</p>
<p>注意：server_addr是服务器端的公网IP地址，server_port是frp服务端口号，auto_token是连接服务器的口令，必须和服务器保持一致。[ssh_1]是客户端通过服务器与用户之间的通道名，每个客户端必须不一样，remote_port是服务器端对外提供本机服务的端口号，即用户连接123.123.123.123:10085，相当于连接127.0.0.1:22,即arm板上的ssh服务</p>
<p>运行客户端：./frpc -c ./frpc.ini</p>
<p>&nbsp;</p>
<p>当前的配置</p>
<p>more frpc.ini</p>
<p>[common]</p>
<p>server_addr = dem.abc.com</p>
<p>server_port = 7000</p>
<p>[game]</p>
<p>type = tcp</p>
<p>local_ip = 192.168.1.232</p>
<p>local_port = 9001</p>
<p>remote_port = 6000</p>
<p>&nbsp;</p>
<p>[http]</p>
<p>type = tcp</p>
<p>local_ip = 192.168.1.232</p>
<p>local_port = 80</p>
<p>remote_port = 6001</p>
<p>&nbsp;</p>
<p>[mysql]</p>
<p>type = tcp</p>
<p>local_ip = 192.168.1.235</p>
<p>local_port = 3306</p>
<p>remote_port = 13306</p>
<p>more frpc_http.ini</p>
<p>[common]</p>
<p>server_addr = dem.abc.com</p>
<p>server_port = 7000</p>
<p>&nbsp;</p>
<p>[http]</p>
<p>type = tcp</p>
<p>local_ip = 192.168.1.232</p>
<p>local_port = 80</p>
<p>remote_port = 6001</p>
<p>这样demo.abc.com 的13306映射到3306,6001映射到80端口等等；</p>
<p>在客户端开启：最好后台运行启动客户端proxy：</p>
<p>nohup ./frpc&nbsp; -c ./frpc.ini &amp;</p>
<p>[I] [control.go:240] [e465e02f8bad1e5b] login to server success, get run id [e465e02f8bad1e5b], server udp port [0]</p>
<p>2018/05/17 10:48:16 [I] [control.go:165] [e465e02f8bad1e5b] [http] start proxy success</p>
<p>2018/05/17 10:48:16 [I] [control.go:165] [e465e02f8bad1e5b] [mysql] start proxy success</p>
<p>2018/05/17 10:49:11 [I] [service.go:96] frps tcp listen on 0.0.0.0:7000</p>
<p>2018/05/17 10:49:11 [I] [main.go:112] Start frps success</p>
<p>2018/05/17 10:49:11 [I] [main.go:114] PrivilegeMode is enabled, you should pay more attention to security issues</p>
<p>&nbsp;</p>
<p>PS：配置很简单，但是记得nohup ./frps -c ./frps.ini &amp; 在要穿透的远程服务器开启，nohup ./frpc&nbsp; -c ./frpc.ini &amp; 在内网开启，记得开放远程服务器穿透端口；</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux 磁盘挂载扩充格式化</title>
    <url>/2023/11/10/linux-%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E6%89%A9%E5%85%85%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="linux服务器硬盘格式化挂载："><a href="#linux服务器硬盘格式化挂载：" class="headerlink" title="linux服务器硬盘格式化挂载："></a>linux服务器硬盘格式化挂载：</h1><p>请根据以下步骤对数据盘进行分区以及格式化，并挂载分区使数据盘可用。</p>
<h2 id="1-1-查看数据盘信息"><a href="#1-1-查看数据盘信息" class="headerlink" title="1.1 查看数据盘信息"></a>1.1 查看数据盘信息</h2><p>登录Linux云服务器后，可以使用“fdisk -l”命令查看数据盘相关信息。<br>使用“df -h”命令，无法看到未分区和格式化的数据盘。 </p>
<h2 id="1-2-数据盘分区"><a href="#1-2-数据盘分区" class="headerlink" title="1.2 数据盘分区"></a>1.2 数据盘分区</h2><p>执行以下命令，对数据盘进行分区。</p>
<p>fdisk /dev/xvdb</p>
<p>按照界面的提示，依次输入“n”(新建分区)、“p”(新建扩展分区)、“1”(使用第1个主分区)，两次回车(使用默认配置)，输入“wq”(保存分区表)，开始分区。<br>这里是以创建1个分区为例，开发者也可以根据自己的需求创建多个分区。</p>
<h2 id="1-3-查看新分区"><a href="#1-3-查看新分区" class="headerlink" title="1.3 查看新分区"></a>1.3 查看新分区</h2><p>使用“fdisk -l”命令，即可查看到，新的分区xvdb1已经创建完成。</p>
<h2 id="1-4-格式化新分区"><a href="#1-4-格式化新分区" class="headerlink" title="1.4 格式化新分区"></a>1.4 格式化新分区</h2><p>在进行分区格式化时，开发者可以自行决定文件系统的格式，如ext2、ext3等。<br>这里以“ext3”为例：<br>使用下面的命令对新分区进行格式化。 </p>
<p>mkfs.ext3 /dev/xvdb1</p>
<h2 id="1-5-挂载新分区"><a href="#1-5-挂载新分区" class="headerlink" title="1.5 挂载新分区"></a>1.5 挂载新分区</h2><p>使用命令“mkdir /mydata”创建mydata目录，再通过“mount /dev/xvdb1 /mydata”命令手动挂载新分区后，用“df -h”命令查看，出现以下信息说明挂载成功，即可以查看到数据盘了。</p>
<h2 id="1-6-添加分区信息"><a href="#1-6-添加分区信息" class="headerlink" title="1.6 添加分区信息"></a>1.6 添加分区信息</h2><p>如果希望云服务器在重启或开机时能自动挂载数据盘，必须将分区信息添加到/etc/fstab中。如果没有添加，则云服务器重启或开机后，都不能自动挂载数据盘。<br>使用“echo ‘/dev/xvdb1 /mydata ext3 defaults 0 0’ &gt;&gt; /etc/fstab”命令添加分区信息后，使用“cat /etc/fstab”命令查看，出现以下信息表示添加分区信息成功。</p>
<h1 id="2-腾讯云服务器硬盘扩充，新空间增加到已有分区空间中："><a href="#2-腾讯云服务器硬盘扩充，新空间增加到已有分区空间中：" class="headerlink" title="2.腾讯云服务器硬盘扩充，新空间增加到已有分区空间中："></a>2.腾讯云服务器硬盘扩充，新空间增加到已有分区空间中：</h1><p>  线上业务服务器1T硬盘，日志量太大，需要扩充到2T硬盘，关机购买硬盘以后启动开始在原有盘上面开始扩充：</p>
<h2 id="2-1-查看数据盘信息"><a href="#2-1-查看数据盘信息" class="headerlink" title="2.1 查看数据盘信息"></a>2.1 查看数据盘信息</h2><h2 id="root-VM-0-17-centos-fdisk-l"><a href="#root-VM-0-17-centos-fdisk-l" class="headerlink" title="[root@VM_0_17_centos ~]# fdisk -l"></a>[root@VM_0_17_centos ~]# fdisk -l</h2><p> Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x000c7a75</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vda1   *        2048   104857599    52427776   83  Linux</p>
<p>Disk /dev/vdb: 2147.5 GB, 2147483648000 bytes, 4194304000 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x947d4eff</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vdb1            2048  2097151999  1048574976   83  Linux</p>
<h2 id="2-2查看原来1T磁盘："><a href="#2-2查看原来1T磁盘：" class="headerlink" title="2.2查看原来1T磁盘："></a>2.2查看原来1T磁盘：</h2><p>df -h</p>
<p>Filesystem      Size  Used Avail Use% Mounted on</p>
<p>/dev/vda1        50G  4.1G   43G   9% /</p>
<p>devtmpfs         16G     0   16G   0% /dev</p>
<p>tmpfs            16G   24K   16G   1% /dev/shm</p>
<p>tmpfs            16G  300K   16G   1% /run</p>
<p>tmpfs            16G     0   16G   0% /sys/fs/cgroup</p>
<p>/dev/vdb1       985G  150G  785G  17% /data</p>
<p>tmpfs           3.2G     0  3.2G   0% /run/user/0</p>
<h2 id="2-3卸载原硬盘："><a href="#2-3卸载原硬盘：" class="headerlink" title="2.3卸载原硬盘："></a>2.3卸载原硬盘：</h2><p>umount /data/</p>
<p>[root@VM_0_17_centos ~]# df -h</p>
<p>Filesystem      Size  Used Avail Use% Mounted on</p>
<p>/dev/vda1        50G  4.1G   43G   9% /</p>
<p>devtmpfs         16G     0   16G   0% /dev</p>
<p>tmpfs            16G   24K   16G   1% /dev/shm</p>
<p>tmpfs            16G  300K   16G   1% /run</p>
<p>tmpfs            16G     0   16G   0% /sys/fs/cgroup</p>
<p>tmpfs           3.2G     0  3.2G   0% /run/user/0</p>
<h2 id="2-4确认卸载："><a href="#2-4确认卸载：" class="headerlink" title="2.4确认卸载："></a>2.4确认卸载：</h2><p>[root@VM_0_17_centos ~]# fdisk -l</p>
<p>Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x000c7a75</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vda1   *        2048   104857599    52427776   83  Linux</p>
<p>Disk /dev/vdb: 2147.5 GB, 2147483648000 bytes, 4194304000 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x947d4eff</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vdb1            2048  2097151999  1048574976   83  Linux</p>
<h2 id="2-5-开始格盘："><a href="#2-5-开始格盘：" class="headerlink" title="2.5 开始格盘："></a>2.5 开始格盘：</h2><p> 按照界面的提示，一次输入”p”(查看已有分区信息), ”d”(删除需要扩容的分区)、“n”(新建分区)、“p”(新建主分区)、“1”(使用第1个主分区，必须保持与需要扩容的分区一样)，两次回车(使用默认配置)，输入“w”(保存分区表)，开始分区。<br>这里是以创建1个分区为例，用户也可以根据自己的需求扩容多个分区。</p>
<p>[root@VM_0_17_centos ~]# fdisk  /dev/vdb</p>
<p>Welcome to fdisk (util-linux 2.23.2).</p>
<p>Changes will remain in memory only, until you decide to write them.</p>
<p>Be careful before using the write command.</p>
<p> Command (m for help): p</p>
<p>Disk /dev/vdb: 2147.5 GB, 2147483648000 bytes, 4194304000 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x947d4eff</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vdb1            2048  2097151999  1048574976   83  Linux</p>
<p>Command (m for help): d</p>
<p>Selected partition 1</p>
<p>Partition 1 is deleted</p>
<p>Command (m for help): n</p>
<p>Partition type:</p>
<p>   p   primary (0 primary, 0 extended, 4 free)</p>
<p>   e   extended</p>
<p>Select (default p): p</p>
<p>Partition number (1-4, default 1): 1</p>
<p>First sector (2048-4194303999, default 2048):</p>
<p>Using default value 2048</p>
<p>Last sector, +sectors or +size{K,M,G} (2048-4194303999, default 4194303999):</p>
<p>Using default value 4194303999</p>
<p>Partition 1 of type Linux and of size 2 TiB is set</p>
<p>Command (m for help): w</p>
<p>The partition table has been altered!</p>
<p>Calling ioctl() to re-read partition table.</p>
<p>Syncing disks.</p>
<p>[root@VM_0_17_centos ~]# fdisk -l</p>
<p>Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x000c7a75</p>
<p>   Device Boot      Start         End      Blocks   Id  System</p>
<p>/dev/vda1   *        2048   104857599    52427776   83  Linux</p>
<p>Disk /dev/vdb: 2147.5 GB, 2147483648000 bytes, 4194304000 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<p>Disk label type: dos</p>
<p>Disk identifier: 0x947d4eff</p>
<pre><code>Device Boot      Start         End      Blocks   Id  System
</code></pre>
<p>/dev/vdb1            2048  4194303999  2097150976   83  Linux</p>
<h2 id="2-6确认磁盘"><a href="#2-6确认磁盘" class="headerlink" title="2.6确认磁盘"></a>2.6确认磁盘</h2><p>使用“fdisk –l /dev/vdb1”命令，即可查看到，新的分区vdb1已经创建并扩容完成：</p>
<p>[root@VM_0_17_centos ~]# fdisk -l /dev/vdb1</p>
<p> Disk /dev/vdb1: 2147.5 GB, 2147482599424 bytes, 4194301952 sectors</p>
<p>Units = sectors of 1 * 512 = 512 bytes</p>
<p>Sector size (logical/physical): 512 bytes / 512 bytes</p>
<p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p>
<h2 id="2-7-再使用e2fsck-f-dev-xvdc1检查扩容的分区是否ok"><a href="#2-7-再使用e2fsck-f-dev-xvdc1检查扩容的分区是否ok" class="headerlink" title="2.7 再使用e2fsck -f /dev/xvdc1检查扩容的分区是否ok"></a>2.7 再使用e2fsck -f /dev/xvdc1检查扩容的分区是否ok</h2><p>[root@VM_0_17_centos /]# e2fsck -f /dev/vd</p>
<p>vda   vda1  vdb   vdb1 </p>
<p>[root@VM_0_17_centos /]# e2fsck -f /dev/vdb1</p>
<p>e2fsck 1.42.9 (28-Dec-2013)</p>
<p>/dev/vdb1 is mounted.</p>
<p>e2fsck: Cannot continue, aborting.</p>
<p>似乎看到一个报错，不过后面查看扩充成功了，是不是成功了半信半疑的。。</p>
<h2 id="2-8-使用resize2fs-dev-xvdc1命令扩容分区："><a href="#2-8-使用resize2fs-dev-xvdc1命令扩容分区：" class="headerlink" title="2.8 使用resize2fs /dev/xvdc1命令扩容分区："></a>2.8 使用resize2fs /dev/xvdc1命令扩容分区：</h2><p>resize2fs /dev/vdb</p>
<p>vdb   vdb1 </p>
<p>[root@VM_0_17_centos /]# resize2fs /dev/vdb1</p>
<p>resize2fs 1.42.9 (28-Dec-2013)</p>
<p>Filesystem at /dev/vdb1 is mounted on /data; on-line resizing required</p>
<p>old_desc_blocks = 125, new_desc_blocks = 250</p>
<p>The filesystem on /dev/vdb1 is now 524287744 blocks long.</p>
<p>df -h</p>
<p>Filesystem      Size  Used Avail Use% Mounted on</p>
<p>/dev/vda1        50G  4.1G   43G   9% /</p>
<p>devtmpfs         16G     0   16G   0% /dev</p>
<p>tmpfs            16G   24K   16G   1% /dev/shm</p>
<p>tmpfs            16G  300K   16G   1% /run</p>
<p>tmpfs            16G     0   16G   0% /sys/fs/cgroup</p>
<p>/dev/vdb1       2.0T  150G  1.7T   8% /data</p>
<p>tmpfs           3.2G     0  3.2G   0% /run/user/0</p>
<h2 id="2-9-挂载-data盘，写入-etc-fstab"><a href="#2-9-挂载-data盘，写入-etc-fstab" class="headerlink" title="2.9  挂载/data盘，写入/etc/fstab"></a>2.9  挂载/data盘，写入/etc/fstab</h2><p> 不过做扩充时候是自动写进去的，重启过正常，数据没丢。。</p>
<p>cat /etc/fstab</p>
<p>/dev/vda1            /                    ext3       noatime,acl,user_xattr 1 1</p>
<p>proc                 /proc                proc       defaults              0 0</p>
<p>sysfs                /sys                 sysfs      noauto                0 0</p>
<p>debugfs              /sys/kernel/debug    debugfs    noauto                0 0</p>
<p>devpts               /dev/pts             devpts     mode=0620,gid=5       0 0</p>
<p>/dev/disk/bd/virtio-diskt1            /data                    ext4       defaults,nofail 0 1</p>
]]></content>
  </entry>
  <entry>
    <title>php 安装redis，protobuf,mcryp扩展</title>
    <url>/2023/11/10/php-%E5%AE%89%E8%A3%85redis%EF%BC%8Cprotobuf-mcryp%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>&nbsp; 测试机上测试一些数据需要用到redis扩展，偷懒yum安装的php，以前yum install php-pecl-redis.x86_64可以安装扩展，这次找不到安装包，不折腾手动安装下。</p>
<p>1.下载phpredis</p>
<p>cd /usr/local/src</p>
<p>wget <a href="https://github.com/nicolasff/phpredis/archive/2.2.4.tar.gz">https://github.com/nicolasff/phpredis/archive/2.2.4.tar.gz</a></p>
<p>tar -zxvf 2.2.4.tar.gz</p>
<p>cd phpredis-2.2.4/</p>
<p>2.用phpize生成configure配置文件</p>
<p>/usr/bin/phpize&nbsp; #会生成几个新文件，默认安装路径自定义的按照自定义路径；</p>
<p>./configure –with-php-config=/usr/bin/php-config</p>
<p>make #编译</p>
<p>make install #安装</p>
<p>make test #测试</p>
<p>3.配置php支持</p>
<p>vim /usr/local/php/etc/php.ini #编辑配置文件，在最后一行添加以下内容</p>
<p>extension=”redis.so”</p>
<ol start="4">
<li></li>
</ol>
<p>重启http加载查看phpinfo信息：</p>
<p>redis</p>
<p>Redis Supportenabled</p>
<p>Redis Version2.2.4</p>
<p>成功！</p>
<p>php扩展Protobuf</p>
<p>下载protobuf扩展包：wget <a href="https://github.com/allegro/php-protobuf/archive/master.zip%E8%BF%99%E4%B8%AAmaster.zip%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%9B">https://github.com/allegro/php-protobuf/archive/master.zip这个master.zip会报错；</a></p>
<p>master.zip</p>
<p>cd /home/tools/php-protobuf-master/</p>
<p>phpize</p>
<p>可能会报错php-devel</p>
<p>yum install php-devel</p>
<p>./configure<br>1.<br>make&nbsp;&amp;&amp;&nbsp;make&nbsp;install<br>1.</p>
<p>If you ever happen to want to link against installed libraries</p>
<p>in a given directory, LIBDIR, you must either use libtool, and</p>
<p>specify the full pathname of the library, or use the `-LLIBDIR’</p>
<p>flag during linking and do at least one of the following:</p>
<p>&nbsp;&nbsp; - add LIBDIR to the `LD_LIBRARY_PATH’ environment variable</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; during execution</p>
<p>&nbsp;&nbsp; - add LIBDIR to the `LD_RUN_PATH’ environment variable</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; during linking</p>
<p>&nbsp;&nbsp; - use the `-Wl,-rpath -Wl,LIBDIR’ linker flag</p>
<p>&nbsp;&nbsp; - have your system administrator add LIBDIR to `/etc/ld.so.conf’</p>
<p>&nbsp;</p>
<p>See any operating system documentation about shared libraries for</p>
<p>more information, such as the ld(1) and ld.so(8) manual pages.</p>
<hr>
<p>&nbsp;</p>
<p>Build complete.</p>
<p>Don’t forget to run ‘make test’.</p>
<p>&nbsp;</p>
<p>Installing shared extensions:&nbsp;&nbsp;&nbsp;&nbsp; /usr/lib64/php/modules/</p>
<p>然后再php.ini增加</p>
<p>extension = protocolbuffers.so</p>
<p>重启下http就可以了；</p>
<p>装载protobuff库：</p>
<p>&nbsp;pear&nbsp;channel-discover&nbsp;pear.pollinimini.net&nbsp;</p>
<p>pear&nbsp;install&nbsp;drslump/Protobuf-beta&nbsp;</p>
<p>mcryp扩展：</p>
<p>yum install libmcrypt libmcrypt-devel mcrypt mhash 如果报错找不到补丁的话手动安装；</p>
<p>下载Libmcrypt,mhash,mcrypt安装包</p>
<p>Libmcrypt(libmcrypt-2.5.8.tar.gz)：<a href="http://sourceforge.net/project/showfiles.php?group_id=87941&amp;package_id=91774&amp;release_id=487459">http://sourceforge.net/project/showfiles.php?group_id=87941&amp;package_id=91774&amp;release_id=487459</a></p>
<p>mcrypt(mcrypt-2.6.8.tar.gz ):<a href="http://sourceforge.net/project/showfiles.php?group_id=87941&amp;package_id=91948&amp;release_id=642101">http://sourceforge.net/project/showfiles.php?group_id=87941&amp;package_id=91948&amp;release_id=642101</a></p>
<p>mhash(mhash-0.9.9.9.tar.gz):<a href="http://sourceforge.net/project/showfiles.php?group_id=4286&amp;package_id=4300&amp;release_id=645636">http://sourceforge.net/project/showfiles.php?group_id=4286&amp;package_id=4300&amp;release_id=645636</a></p>
<p>2.先安装Libmcrypt</p>
<p>tar -zxvf libmcrypt-2.5.8.tar.gz</p>
<p>cd libmcrypt-2.5.8</p>
<p>./configure</p>
<p>make</p>
<p>make install</p>
<p>说明：libmcript默认安装在/usr/local&nbsp;</p>
<p>3.再安装mhash</p>
<p>tar -zxvf mhash-0.9.9.9.tar.gz</p>
<p>cd mhash-0.9.9.9</p>
<p>./configure</p>
<p>make &amp;&amp; make install</p>
<p>4.最后安装mcrypt</p>
<p>tar -zxvf mcrypt-2.6.8.tar.gz</p>
<p>cd mcrypt-2.6.8</p>
<p>LD_LIBRARY_PATH=/usr/local/lib ./configure</p>
<p>make &amp;&amp; make install</p>
<p>说明：由于在配置Mcrypt时，会找不到libmcrypt的链接库，导致无法编译，因为Libmcrypt的链接库在/usr/local/lib文件夹下。</p>
<p>因次，在配置mcrypt时要加入LD_LIBRARY_PATH=/usr/local/lib导入键接库。</p>
<p>到&nbsp;<a href="http://cn.php.net/releases/">http://cn.php.net/releases/</a>&nbsp;网页下找到自己对应php版本，下载后解压</p>
<p>cd php-5.4.16/ext/mcrypt/</p>
<p>phpize (执行phpize命令（phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块，如果没有？yum install php-devel)</p>
<p>phpize&nbsp;</p>
<p>Configuring for:</p>
<p>PHP Api Version:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;20100412</p>
<p>Zend Module Api No:&nbsp; &nbsp; &nbsp; 20100525</p>
<p>Zend Extension Api No:&nbsp; &nbsp;220100525</p>
<p>yum 安装php./configure就可以，定制的需要自己的路径如比：./configure –with-php-config=/usr/bin/php-config</p>
<p>./configure</p>
<p>make &amp;&amp; make install</p>
<p>Libraries have been installed in:</p>
<p>&nbsp; &nbsp;/home/tools/php-5.4.16/ext/mcrypt/modules</p>
<p>If you ever happen to want to link against installed libraries</p>
<p>in a given directory, LIBDIR, you must either use libtool, and</p>
<p>specify the full pathname of the library, or use the `-LLIBDIR’</p>
<p>flag during linking and do at least one of the following:</p>
<p>&nbsp; &nbsp;- add LIBDIR to the `LD_LIBRARY_PATH’ environment variable</p>
<p>&nbsp; &nbsp; &nbsp;during execution</p>
<p>&nbsp; &nbsp;- add LIBDIR to the `LD_RUN_PATH’ environment variable</p>
<p>&nbsp; &nbsp; &nbsp;during linking</p>
<p>&nbsp; &nbsp;- use the `-Wl,-rpath -Wl,LIBDIR’ linker flag</p>
<p>&nbsp; &nbsp;- have your system administrator add LIBDIR to `/etc/ld.so.conf’</p>
<p>See any operating system documentation about shared libraries for</p>
<p>more information, such as the ld(1) and ld.so(8) manual pages.</p>
<hr>
<p>Build complete.</p>
<p>Don’t forget to run ‘make test’.</p>
<p>Installing shared extensions:&nbsp; &nbsp; &nbsp;/usr/lib64/php/modules/</p>
<p>php.ini添加一条extension=mcrypt.so</p>
<p>extension = protocolbuffers.so</p>
<p>extension = mcrypt.so</p>
<hr>
]]></content>
  </entry>
</search>
